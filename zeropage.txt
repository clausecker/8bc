#zero page usage

0000--0007 interrupt handler
0010--0017 indexed memory locations
0020--0037 function parameters
0040--0047 runtime function pointers (arithmetic)
0050--0053 runtime function pointers (frame management)
      0056 return value
      0057 return address
0060--0077 argument lvalues
0100--0177 scratch registers

#calling convention

Arguments are stored from left to right at 0020.
The return value is found in AC.
The return address is stored in the first word of
the procedure as JMS does.

#frame management

ECF (JMS I 0050)  establish call frame
(argc << 6 | framesize)
(lvalues: framesize words)
(argv: argc words)

copy framesize words from lvalues to 0100
copy argc words from 0020 to argv
write argc pointers to argv to 0060
write return address (at location of instruction - 1) to 0057
clear AC
continue after argv

RCF (JMS I 0051)  restore call frame
(frame)

frame points to just after an EAR
same action as EAR but with an indirect activation record
except we don't copy parameters from 0020
clear AC
continue after frame

IAV (JMS I 0052)  initialize automatic variables
(len)
(data: len words)
(var: len words)

copy len words from data to var
clear AC
continue after data

JSR (JMS I 0053)  jump subroutine, save, and restore
(len << 6 | offset)
(buf)
(fun)

copy len words from 0100 + offset to buf
then JMS I fun
then copy len words from buf to 0100 + offset
continue after fun

RET (JMS I 0057)  return from subroutine

returns to caller, assuming call frame was previously
established with ECF or RCF

#arithmetic

SHL (JMS I 0040)  shift left
(addr)

AC = *addr << AC
continue after addr


SHR (JMS I 0041)  shift right
(addr)

AC = *addr1 >> AC
continue after addr


MUL (JMS I 0042)  multiply (unsigned)
(addr)

AC = *addr * AC
continue after addr


DIV (JMS I 0043)  divide (unsigned)
(addr)

AC = *addr / AC
continue after addr


MOD (JMS I 0044)  modulo (unsigned)
(addr)

AC = *addr % AC
continue after addr


IOR (JMS I 0045)  inclusive or
(addr)

AC = *addr | AC
continue after addr


XOR (JMS I 0046)  exclusive or
(addr)

AC = *addr ^ AC
continue after addr
