/*
 * There are two name tables in this compiler.  The defns table
 * stores (global) definitions, while the decls table store local
 * declarations.  Each entry in the defns table has class LLABEL
 * while The following functions are available:
 *
 * expr = define(name)
 *     Look up name in the definition table and return a pointer to
 *     the entry found.  If no entry was found, a new one is allocated
 *     and set to a new label.
 *
 * expr = lookup(name)
 *     Look up name in the declaration table.  If name is found, return
 *     a pointer to its entry.  If multiple entries are found, return
 *     the last one.  If no entry is found, return NULL.
 *
 * expr = declare(expr)
 *     Enter expr into the declaration table and return a pointer to the
 *     new entry.  Does not check if the entry already exists.
 *
 * scope = beginscope()
 *     Begin a new scope in the declaration table.  Return the number of
 *     the scope.
 *
 * endscope(scope)
 *     End scope in the declaration table.  All entries entered after
 *     the corresponding beginscope() call are removed.
 */
extern struct expr *define(const char name[MAXNAME]);
extern struct expr *lookup(const char name[MAXNAME]);
extern struct expr *declare(struct expr *);
extern int beginscope(void);
extern void endscope(int);

/*
 * Label generation machinery.  All labels generated by the compiler
 * have the form L#### where #### are four octal digits.  A new label
 * is generated with the newlabel function.  A label can be placed at
 * the current location with putlabel.  setlabel behaves similar but
 * sets the label's value to be whatever is emitted next.
 */
extern void newlabel(struct expr *);
extern void putlabel(const struct expr *);
extern void setlabel(const struct expr *);
