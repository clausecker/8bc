// C-like B grammar

translation-unit
	= external-declaration*
external-declaration
	= function-definition
	| declaration
function-definition
	= declarator declaration* compound-statement
declaration
	= storage-class init-declarator ("," init-declarator)* ";"
storage-class
	= "extern"
	| "static"
	| "auto"
init-declarator
	= declarator
	| declarator "=" initializer
declarator
	= "*"* direct-declarator
direct-declarator
	= IDENTIFIER
	| "(" declarator ")"
	| direct-declarator "[" conditional-expression "]"
	| direct-declarator "(" identifier-list? ")"
identifier-list
	= IDENTIFIER ("," IDENTIFIER)*
initializer
	= constant-expression
	| "{" initializer-list ","? "}"
initializer-list
	= initializer ("," initializer)*
statement
	= labeled-statement
	| compound-statement
	| expression-statement
	| selection-statement
	| iteration-statement
	| jump-statement
labeled-statement
	= IDENTIFIER ":" statement
	| "case" constant-expression ":" statement
	| "default" ":" statement
compound-statement
	= "{" declaration* statement* "}"
expression-statement
	= expression? ";"
selection-statement
	= "if" "(" expression ")" statement ("else" statement)?
	| "switch" "(" expression ")" statement
iteration-statement
	= "while" "(" expression ")" statement
	| "do" statement "while" "(" expression ")" ";"
	| "for" "(" expression? ";" expression? ";" expression? ")" statement
jump-statement
	= "goto" IDENTIFIER ";"
	| "continue" ";"
	| "break" ";"
	| "return "expression"? ";"
primary-expression
	= IDENTIFIER
	| CONSTANT
	| STRING-LITERAL
	| "(" expression ")"
postfix-expression
	= primary-expression
	| postfix-expression "[" expression "]"
	| postfix-expression "(" argument-expression-list? ")"
	| postfix-expression "++"
	| postfix-expression "--"
argument-expression-list
	= assignment-expression ("," assignment-expression)*
unary-expression
	= postfix-expression
	| unary-operator unary-expression
unary-operator
	= "++"
	| "--"
	| "&"
	| "*"
	| "+"
	| "-"
	| "~"
	| "!"
multiplicative-expression
	= unary-expression
	| multiplicative-expression "*" cast-expression
	| multiplicative-expression "/" cast-expression
	| multiplicative-expression "%" cast-expression
additive-expression
	= multiplicative-expression
	| additive-expression "+" multiplicative-expression
	| additive-expression "-" multiplicative-expression
shift-expression
	= additive-expression
	| shift-expression "<<" additive-expression
	| shift-expression ">>" additive-expression
relational-expression
	= shift-expression
	| relational-expression "<" shift-expression
	| relational-expression ">" shift-expression
	| relational-expression "<=" shift-expression
	| relational-expression ">=" shift-expression
equality-expression
	= relational-expression
	| equality-expression "==" relational-expression
	| equality-expression "!=" relational-expression
and-expression
	= equality-expression
	| and-expression "&" equality-expression
exclusive-or-expression
	= and-expression
	| exclusive-or-expression "^" and-expression
inclusive-or-expression
	= exlusive-or-expression
	| inclusive-or-expression "|" exclusive-or-expression
logical-and-expression
	= inclusive-or-expression
	| logical-and-expression "&&" inclusive-or-expression
logical-or-expression
	= logical-and-expression
	| logical-or-expression "||" logical-and-expression
conditional-expression
	= logical-or-expression
	| logical-or-expression "?" expression ":" conditional-expression
assignment-expression
	= conditional-expression
	| unary-expression assignment-operator assignment-expression
assignment-operator
	= "="
	| "*="
	| "/="
	| "%="
	| "+="
	| "-="
	| "<<="
	| ">>="
	| "&="
	| "^="
	| "|="
expression
	= assignment-expression
	| expression "," assignment-expression
