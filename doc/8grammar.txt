// the grammar we use for 8bc

8bc uses 6-bit ASCII for its character set:

	  0 1 2 3 4 5 6 7    0 1 2 3 4 5 6 7
	0   ! " # $ % & '
	1 ( ) * + , - . /
	2 0 1 2 3 4 5 6 7
	3 8 9 : ; < = > ?
	4 @ A B C D E F G    ` a b c d e f g
	5 H I J K L M N O    h i j k l m n o
	6 P Q R S T U V W    p q r s t u v w
	7 X Y Z [ \ ] ^ _    x y z { | } ~

Character 00 is the space character.  The characters on the right hand
site are alternative spellings for @ (40) to ^ (76).  If they appear in
an ASCII source file, they are treated the same way as the chracters on
the left.  There is no alternative spelling for _ (character 77).

These are the tokens of B:

punctuation:
	! % & ( ) * + , - / : ; < = > ? [ \ ] ^
	++ -- == != <= >= << >>
	=% =& =* =+ =- =/ =< => =\ =^ === =!= =<= =>= =<< =>>

constant:
	[0-9]+
	'([^*']|\*[0et*'"n])'
	"([^*"]|\*[0et*'"n])*"

name:
	[A-Z_][A-Z_0-9]*

keyword:
	AUTO EXTRN CASE IF ELSE WHILE SWITCH GOTO RETURN

Keywords are reserved and may not be used as identifiers.

This is the grammar of B, given in YACC syntax:

%token	CONSTANT
%token	NAME
%token	AUTO		/* the AUTO keyword */
%token	EXTRN		/* the EXTRN keyword */
%token	CASE		/* the CASE keyword */
%token	IF		/* the IF keyword */
%token	ELSE		/* the ELSE keyword */
%token	WHILE		/* the WHILE keyword */
%token	SWITCH		/* the SWITCH keyword */
%token	GOTO		/* the GOTO keyword */
%token	RETURN		/* the RETURN keyword */
%token	BREAK		/* the BREAK keyword */
%token	DEFAULT		/* the DEFAULT keyword */

%token	ASOR		/* the =\ mark */
%token	ASXOR		/* the =^ mark */
%token	ASAND		/* the =& mark */
%token	ASEQ		/* the === mark */
%token	ASNE		/* the =!= mark */
%token	ASLT		/* the =< mark */
%token	ASLE		/* the =<= mark */
%token	ASGT		/* the => mark */
%token	ASGE		/* the =>= mark */
%token	ASSHL		/* the =<< mark */
%token	ASSHR		/* the =>> mark */
%token	ASADD		/* the =+ mark */
%token	ASSUB		/* the =- mark */
%token	ASMOD		/* the =% mark */
%token	ASMUL		/* the =* mark */
%token	ASDIV		/* the =/ mark */

%token	INC		/* the ++ mark */
%token	DEC		/* the -- mark */

%token	EQ		/* the == mark */
%token	NE		/* the != mark */
%token	LE		/* the <= mark */
%token	GE		/* the >= mark */
%token	SHL		/* the << mark */
%token	SHR		/* the >> mark */

%right ELSE
%right '=' ASOR ASXOR ASAND ASEQ ASNE ASLT ASLE ASGT ASGE ASSHL ASSHR ASADD ASSUB ASMOD ASMUL ASDIV
%right '?' ':'
%left '\\'
%left '^'
%left '&'
%nonassoc EQ NE
%nonassoc '<' '>' LE GE
%left SHL SHR
%left '-'
%left '+'
%left '%' '*' '/'
%right INC DEC '[' '(' '!'

%start	program

%%

program		: /* empty */
		| program definition
		;

definition	: NAME initializer ';' /* simple definition */
		| NAME '[' vector_length ']' initializer ';' /* vector definition */
		| NAME '(' parameters ')' statement /* function definition */
		;

initializer	: /* empty */
		| ival_list
		;

ival_list	: ival
		| ival_list ',' ival
		;

ival		: CONSTANT
		| NAME
		;

vector_length	: /* empty */
		| CONSTANT
		;

parameters	: /* empty */
		| param_list
		;

param_list	: param
		| param_list ',' param
		;

param		: NAME
		;

statement	: AUTO auto_list ';' statement
		| EXTRN extrn_list ';' statement
		| label ':' statement
		| '[' statement_list ']'
		| IF '(' expr ')' statement %prec ELSE
		| IF '(' expr ')' statement ELSE statement
		| WHILE '(' expr ')' statement
		| SWITCH '(' expr ')' statement		/* not original */
		| GOTO expr ';'
		| RETURN expr ';'
		| RETURN ';'
		| BREAK ';'
		| expr ';'
		| ';'
		;

label		: NAME
		| CASE CONSTANT
		| DEFAULT
		;

statement_list	: /* empty */
		| statement_list statement
		;

auto_list	: name_const
		| auto_list ',' name_const
		;

name_const	: NAME constant_opt
		;

extrn_list	: extrn_decl
		| extrn_list ',' extrn_decl
		;

extrn_decl	: NAME
		;

constant_opt	: /* empty */
		| CONSTANT
		;

arguments	: /* empty */
		| argument_list
		;

argument_list	: expr
		| argument_list ',' expr
		;

expr		: NAME
		| CONSTANT
		| '(' expr ')'
		| expr '(' arguments ')'
		| expr '[' expr ']'
		| expr INC
		| expr DEC
		| INC expr
		| DEC expr
		| '+' expr %prec INC
		| '-' expr %prec INC
		| '*' expr %prec INC
		| '&' expr %prec INC
		| '^' expr %prec INC
		| '!' expr
		| expr '*' expr
		| expr '%' expr
		| expr '/' expr
		| expr '+' expr
		| expr '-' expr
		| expr SHL expr
		| expr SHR expr
		| expr '<' expr
		| expr '>' expr
		| expr LE expr
		| expr GE expr
		| expr EQ expr
		| expr NE expr
		| expr '&' expr
		| expr '^' expr
		| expr '\\' expr
		| expr '?' expr ':' expr
		| expr '=' expr
		| expr ASMUL expr
		| expr ASMOD expr
		| expr ASDIV expr
		| expr ASADD expr
		| expr ASSUB expr
		| expr ASSHL expr
		| expr ASSHR expr
		| expr ASLT expr
		| expr ASGT expr
		| expr ASLE expr
		| expr ASGE expr
		| expr ASEQ expr
		| expr ASNE expr
		| expr ASAND expr
		| expr ASXOR expr
		| expr ASOR expr
		;

%%

The precedence and associativity of the binary operators  are as
follows with operators of the highest precedence first:

OPERATORS		ASSOCIATIVITY	CLASS
* & + - ^ ! ++ -- () []	right to left	unary operators
% * /			left to right	multiplicative operators
+ -			left to right	additive operators
<< >>			left to right	shift operators
< >= > >=		none		relational operators
== !=			none		equality operators
&			left to right	the and operator
^			left to right	the exclusive or operator
\			left to right	the inclusive or operator
?:			right to left	the conditional operator
= =...			right to left	assignment operators
